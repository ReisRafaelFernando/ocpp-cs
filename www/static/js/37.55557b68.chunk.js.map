{"version":3,"sources":["routes/Ocpp/OcppStations/OcppStations.js","routes/Admin/Title.js","components/Widget/index.js","routes/Admin/Dashboard/AdminDashLink.js"],"names":["OcppStations","props","m","key","prefix","intl","formatMessage","id","load","setState","pending","context","ocpp","q","stations","getArray","state","this","prevProps","locale","spinning","title","url","icon","length","gutter","map","station","idx","lg","xs","style","alignItems","to","Identity","color","label","text","Address","fontSize","Connection","IP","className","Port","Socket","React","Component","contextType","Context","injectIntl","Title","Widget","children","styleName","cover","extra","actions","defaultProps","AdminDashLink"],"mappings":"gSAQMA,EAAY,kDAEhB,WAAYC,GAAQ,IAAD,EAKf,OALe,qBACjB,cAAMA,IAMRC,EAAI,SAACC,GAAuC,IAAlCC,EAAM,uDAAG,oBAEjB,OADiB,EAAKH,MAAdI,KACIC,cAAc,CAAEC,GAAIH,EAASD,GAC3C,EAAE,EAWFK,KAAI,gCAAG,8FAE2B,OADhC,EAAKC,SAAS,CAAEC,SAAS,IAAQ,KAClB,EAAKC,QAAQC,KAAI,SACxB,EAAKD,QAAQC,KAAKC,EAAE,mBAAoB,CAAC,GAAE,mBAD/CC,EAAQ,KAAqBC,SAAQ,eAEvC,kBACA,YAGF,EAAKN,SAAS,CAAEC,SAAS,EAAOI,aAAY,2CA3B5C,EAAKE,MAAQ,CACXN,SAAS,EACTI,SAAU,IACV,CACJ,CAmEC,OAnEA,8CAKD,WACEG,KAAKT,MACP,GAAC,gCAED,SAAmBU,GACbA,EAAUb,KAAKc,SAAWF,KAAKhB,MAAMI,KAAKc,QAC5CF,KAAKT,MAET,GAAC,oBAaD,WACE,MAA8BS,KAAKD,MAA3BN,EAAO,EAAPA,QAASI,EAAQ,EAARA,SAEjB,OACE,eAAC,IAAI,CAACM,SAAUV,EAAQ,UACtB,cAAC,IAAK,CACJW,MAAOJ,KAAKf,EAAE,eACdoB,IAAI,QACJC,KAAM,cAAC,IAAgB,OAEvBT,EAASU,SAAWd,GAAW,cAAC,IAAK,IACvC,cAAC,IAAG,CAACe,OAAQ,CAAC,GAAI,IAAI,SACnBX,EAASY,KAAI,SAACC,EAASC,GAAS,IAAD,MAC9B,OACE,cAAC,IAAG,CAACC,GAAI,GAAIC,GAAI,GAAG,SAClB,cAAC,IAAI,UACH,eAAC,IAAG,CAACL,OAAQ,CAAC,GAAI,IAAKM,MAAO,CAAEC,WAAY,UAAW,UACrD,cAAC,IAAG,CAACH,GAAI,GAAIC,GAAI,GAAG,SAClB,cAAC,IAAa,CACZG,GAAE,wBAA0B,OAAPN,QAAO,IAAPA,OAAO,EAAPA,EAASO,UAC9BC,MAAM,OACNC,MAAc,OAAPT,QAAO,IAAPA,OAAO,EAAPA,EAASO,SAChBG,KAAa,OAAPV,QAAO,IAAPA,OAAO,EAAPA,EAASW,QACff,KAAM,cAAC,IAAgB,CAACQ,MAAO,CAAEQ,SAAU,cAG/C,eAAC,IAAG,CAACV,GAAI,GAAIC,GAAI,GAAG,UAClB,6BAAY,OAAPH,QAAO,IAAPA,GAAmB,QAAZ,EAAPA,EAASa,kBAAU,WAAZ,EAAP,EAAqBC,KAC1B,qBAAIC,UAAU,eAAc,UAClB,OAAPf,QAAO,IAAPA,GAAmB,QAAZ,EAAPA,EAASa,kBAAU,WAAZ,EAAP,EAAqBG,KAAI,KAClB,OAAPhB,QAAO,IAAPA,GAAmB,QAAZ,EAAPA,EAASa,kBAAU,WAAZ,EAAP,EAAqBI,mBAhBNhB,EAuB9B,QAIR,KAAC,EA3Ee,CAASiB,IAAMC,WAA3B9C,EACG+C,YAAcC,IA6ERC,sBAAWjD,E,mCCtF1B,8EAIe,SAASkD,EAAMjD,GAC5B,OACE,qCACE,cAAC,IAAM,UACL,gCAAQA,EAAMoB,UAEhB,oBAAIqB,UAAU,gBAAe,SAC3B,cAAC,IAAI,CAACT,GAAIhC,EAAMqB,IAAKoB,UAAU,eAAc,SAC3C,eAAC,IAAK,WACHzC,EAAMsB,KACNtB,EAAMoB,eAMnB,C,mCCpBA,yBAIM8B,EAAS,SAAH,GAA6D,IAAxD9B,EAAK,EAALA,MAAO+B,EAAQ,EAARA,SAAUC,EAAS,EAATA,UAAWC,EAAK,EAALA,MAAOC,EAAK,EAALA,MAAOC,EAAO,EAAPA,QAEzD,OACE,cAAC,IAAI,CAACnC,MAAOA,EAAOmC,QAASA,EAASF,MAAOA,EAAOZ,UAAS,yBAAoBW,GAAaE,MAAOA,EAAM,SACxGH,GAGP,EAEeD,MACfA,EAAOM,aAAe,CACpBJ,UAAW,G,mCCfb,mEAGe,SAASK,EAAczD,GACpC,OACE,cAAC,IAAI,CAACgC,GAAIhC,EAAMgC,GAAG,SACjB,cAAC,IAAM,CACLoB,UAAS,gBAAWpD,EAAMkC,MAAK,sCAAqC,SAEpE,sBAAKO,UAAU,gDAA+C,UAC5D,qBAAKA,UAAU,sBAAqB,SAAEzC,EAAMsB,OAC5C,sBAAKmB,UAAU,gBAAe,UAC5B,oBAAIA,UAAU,mCAAkC,SAAEzC,EAAMmC,QACxD,mBAAGM,UAAU,UAAS,SAAEzC,EAAMoC,gBAM1C,C","file":"static/js/37.55557b68.chunk.js","sourcesContent":["import React from \"react\";\nimport Context from \"../../../Context\";\nimport { injectIntl } from \"react-intl\";\nimport { Card, Col, Empty, Row, Spin } from \"antd\";\nimport AdminDashLink from \"../../Admin/Dashboard/AdminDashLink\";\nimport { AppstoreOutlined, DatabaseOutlined } from \"@ant-design/icons\";\nimport Title from \"../../Admin/Title\";\n\nclass OcppStations extends React.Component {\n  static contextType = Context;\n  constructor(props) {\n    super(props);\n    this.state = {\n      pending: false,\n      stations: [],\n    };\n  }\n  m = (key, prefix = \"ocpp.stationlist.\") => {\n    const { intl } = this.props;\n    return intl.formatMessage({ id: prefix + key });\n  };\n  componentDidMount() {\n    this.load();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.intl.locale !== this.props.intl.locale) {\n      this.load();\n    }\n  }\n\n  load = async () => {\n    this.setState({ pending: true });\n    let stations = this.context.ocpp.getArray(\n      await this.context.ocpp.q(\"/ChargePointList\", {}),\n      \"ChargePointList\",\n      \"Identity\"\n    );\n\n    this.setState({ pending: false, stations });\n  };\n\n  render() {\n    const { pending, stations } = this.state;\n\n    return (\n      <Spin spinning={pending}>\n        <Title\n          title={this.m(\"stationlist\")}\n          url=\"/ocpp\"\n          icon={<AppstoreOutlined />}\n        />\n        {!stations.length && !pending && <Empty />}\n        <Row gutter={[16, 16]}>\n          {stations.map((station, idx) => {\n            return (\n              <Col lg={12} xs={24} key={idx}>\n                <Card>\n                  <Row gutter={[16, 16]} style={{ alignItems: \"center\" }}>\n                    <Col lg={12} xs={24}>\n                      <AdminDashLink\n                        to={`/ocpp/command/${station?.Identity}`}\n                        color=\"teal\"\n                        label={station?.Identity}\n                        text={station?.Address}\n                        icon={<DatabaseOutlined style={{ fontSize: \"48px\" }} />}\n                      />\n                    </Col>\n                    <Col lg={12} xs={24}>\n                      <h3>{station?.Connection?.IP}</h3>\n                      <h4 className=\"gx-text-grey\">\n                        {station?.Connection?.Port} /\n                        {station?.Connection?.Socket}\n                      </h4>\n                    </Col>\n                  </Row>\n                </Card>\n              </Col>\n            );\n          })}\n        </Row>\n      </Spin>\n    );\n  }\n}\n\nexport default injectIntl(OcppStations);\n","import { Space } from \"antd\";\nimport React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Link } from \"react-router-dom\";\nexport default function Title(props) {\n  return (\n    <>\n      <Helmet>\n        <title>{props.title}</title>\n      </Helmet>\n      <h2 className=\"title gx-mb-4\">\n        <Link to={props.url} className=\"gx-text-dark\">\n          <Space>\n            {props.icon}\n            {props.title}\n          </Space>\n        </Link>\n      </h2>\n    </>\n  );\n}\n","import React from \"react\";\nimport {Card} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst Widget = ({title, children, styleName, cover, extra, actions}) => {\n\n  return (\n    <Card title={title} actions={actions} cover={cover} className={`gx-card-widget ${styleName}`} extra={extra}>\n      {children}\n    </Card>\n  )\n};\n\nexport default Widget;\nWidget.defaultProps = {\n  styleName: '',\n};\n\nWidget.propTypes = {\n  title: PropTypes.node,\n  extra: PropTypes.node,\n  cover: PropTypes.node,\n  actions: PropTypes.node,\n  children: PropTypes.node.isRequired\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Widget from \"../../../components/Widget\";\nexport default function AdminDashLink(props) {\n  return (\n    <Link to={props.to}>\n      <Widget\n        styleName={`gx-bg-${props.color} gx-text-white gx-mb-0 widget-link`}\n      >\n        <div className=\"gx-media gx-align-items-center gx-flex-nowrap\">\n          <div className=\"gx-mr-2 gx-mr-xxl-3\">{props.icon}</div>\n          <div className=\"gx-media-body\">\n            <h3 className=\"gx-fs-xl   gx-mb-1 gx-text-white\">{props.label}</h3>\n            <p className=\"gx-mb-0\">{props.text}</p>\n          </div>\n        </div>\n      </Widget>\n    </Link>\n  );\n}\n"],"sourceRoot":""}